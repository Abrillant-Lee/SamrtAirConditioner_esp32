#include <Arduino.h>
#include "infrared.h"
#include "mqtt.h"
#include "dht11_owner.h"
// put function declarations here:

//#define Ir_Serial Serial1

extern PubSubClient client;
void setup() {
  // put your setup code here, to run once:
  Serial.begin(9600);
  Ir_Serial.begin(115200, SERIAL_8N1, 16, 17);
  
  //initMQTTClient();
}

void loop() 
{
  // uint8_t buf[512];     //512
  // byte group_on[] = {0xF5,0x08,0xAE,0x04,0x56,0xCD,0x01,0x56,0x3C,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3C,0x56,0xCC,0x01,0x56,0xCC,0x01,0x56,0x3C,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3C,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0x3C,0x56,0x3D,0x56,0x3C,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0x3C,0x56,0xCD,0x01,0x56,0x3C,0x56,0x3C,0x56,0xCD,0x01,0x56,0x3D,0x56,0xDA,0x13,0x4F,0xCD,0x01,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xAF,0x27,0xF6,0x08,0xAE,0x04,0x56,0xCC,0x01,0x56,0x3C,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0xCD,0x01,0x56,0x3C,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0xCD,0x01,0x56,0xCD,0x01,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0x3D,0x56,0xDD,0x13,0x4F,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0x3D,0x56,0xCD,0x01,0x56,0xCD,0x01,0x56,0xCD,0x01,0x56};
  // int dataLen = sizeof(group_on) / sizeof(group_on[0]);
  // printf("%d\n", sizeof(group_on));

  // // uint8_t* cmdBuf = buf;

  // // WriteToStorageCmd(group_on, dataLen,0x00,buf);   
  // uint8_t* cmdBuf = buf;
  // byte len = WriteToStorageCmd(group_on, dataLen, 0x00, &cmdBuf);
  // if (len > 0) 
  // {
  //     for (int i = 0; i < dataLen+8; ++i)
  //     {
  //         printf(" %02X ", cmdBuf[i]); // 使用%02X以十六进制格式打印每个字节
  //     }
  //     printf("Command length: %d\n", dataLen);
  //     free(cmdBuf); // 释放动态分配的内存
  // }
  //  AC_onoff_cmd();
  // AC_updown_on();
  AC_on();
  delay(3000);


  



  // byte group = 0; // 示例组号int
  // len = IrStudy_data(buf, group); // 调用IrStudy_data并获取命令帧长度  
  // 打印buf的内容
  /*
  for (int i = 0; i < dataLen+10; ++i)
  {
      printf(" %02X ", buf[i]); // 使用%02X以十六进制格式打印每个字节
  }
  printf("complete!");
  printf("\n");  
  // 打印len的值
  printf("Command length: %d\n", dataLen);
  */
  
  // // 正确累加group_on数组的元素值
  // uint32_t a = 0; // 更改为合适的无符号整型，确保足够大以容纳累加值
  // for (byte i = 0; i < dataLen; ++i)
  // {
  //     a += group_on[i];
  // }
  // printf("%u\n", a); // 使用%u打印无符号整数
  // printf("1\n");




  // float temp = gettemp();
  // float hum = gethum();  
  // int values[] = {};
  // const char *properties[] = {"temp:","hum:"};
  // reportDeviceValues("mwaveradar", properties, values, sizeof(values) / sizeof(values[0]));
  // int values[] = {temp,hum};
  // printf("report  success ! \n");
  // delay(500);  
  // printf("control  success ! ");
    
  

}

